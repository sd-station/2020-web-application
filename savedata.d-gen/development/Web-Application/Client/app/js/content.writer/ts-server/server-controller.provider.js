export class ServerControllerProvider {
    GetProvider() {
        return [
            `import { existsSync, readFileSync, writeFileSync } from "fs";`,
            `import { join } from "path";`,
            `import { Isite_setting, IStoresite_setting } from "site-setting-api";`,
            "",
            `export class  ${this.defaultControllerName} implements IController {`,
            "",
            `    FileName = "${this.filename}"; `,
            `    Data: IStore${window.ReqParameters["project.title"].replace(/\-/g, "_")}[] = [];`,
            "    FullPath!: string;",
            "",
            "    GetNewRowNumber(): number {",
            "        return 1 + (this.Data.length > 0 ? this.Data[this.Data.length - 1].irn : 0);",
            "    }",
            "",
            "    LoadData(FullPath: string) {",
            `        this.FullPath = FullPath.replace(/\\//g, "\\\\");`,
            "        if (existsSync(FullPath)) this.Data = JSON.parse(readFileSync(FullPath).toString());",
            "    }",
            "",
            "    SaveData() {",
            "        if (!existsSync(this.FullPath)) {",
            "           new Directory().MakeExist(this.FullPath);",
            "        }",
            "        writeFileSync(this.FullPath, JSON.stringify(this.Data));",
            "    }",
            "",
            "    Get(url: string) {",
            `        var path = join(ServerEnv.data, ...url.split("/").filter(i => i.length > 0), this.FileName);`,
            "        if (existsSync(path)) new Result().SendText(readFileSync(path).toString());",
            `        else new Result().SendText("[]");`,
            "    }",
            "",
            "    Create(data: ISendData) {",
            `        var decodetext = Buffer.from(data.data, 'base64').toString();`,
            `        var Sended = JSON.parse(decodetext) as I${window.ReqParameters["project.title"].replace(/\-/g, "_")};`,
            "        this.LoadData(join(ServerEnv.data, data.path, this.FileName));",
            `        var nr = {} as IStore${window.ReqParameters["project.title"].replace(/\-/g, "_")};`,
            "        //> System Assignment ",
            "        nr.irn = this.GetNewRowNumber();",
            "        nr.rtm = new Date().getTime();",
            "        //> User Assignment ",
            `${this.UserAssignment}`,
            "        this.Data.push(nr);",
            "        this.SaveData();",
            `        new Result().SendText("ok");`,
            "    }",
            "",
            `    Edit(id: number,data: ISendData) {`,
            `        var decodetext = Buffer.from(data.data, 'base64').toString();`,
            `        var Sended = JSON.parse(decodetext) as ITaskItem;`,
            `        this.LoadData(join(ServerEnv.data, data.path, this.FileName));`,
            `        var nr = this.Data.find(h => h.irn == id);`,
            `        if (!nr) return false;`,
            `        //> System Assignment `,
            `        nr.utm = new Date().getTime();`,
            `        //> User Assignment `,
            `${this.UserAssignment}`,
            `    `,
            `        this.SaveData();`,
            `        return true;`,
            `    }`,
            "",
            "    OnPost(command: string, data: ISendData) {",
            `        if (command.startsWith("create")) this.Create(data);`,
            `        if (command.startsWith("edit")) {`,
            `             var mvc = data.request.split("/").filter(u => u.trim().length > 0);`,
            "            if (mvc.length < 3) { new Result().StatusResult(HTTPStatus.BAD_REQUEST); return; }",
            `            if (this.Edit(parseInt(mvc[2]), data)) new Result().SendText("ok"); else new Result().StatusResult(HTTPStatus.BAD_REQUEST)`,
            "        }",
            "    }",
            "",
            "    OnGet(command: string,) {",
            "        this.Get(command);",
            "    }",
            "}"
        ].join("\n");
    }
}
//# sourceMappingURL=server-controller.provider.js.map
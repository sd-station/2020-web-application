export class FormUsageProvider {
    GetProvider() {
        return [
            `//> ${this.formID}.handler.ts`,
            "",
            `import { I${this.formname} } from "${this.formID}-api";`,
            `import { handleFormSubmit } from "./handle-form-data";`,
            "",
            `export class FormHandlerBase {`,
            "",
            `    config = { method: "GET", url: "/api/v1/" };`,
            "",
            `    ${this.DIF.join("\n")}`,
            "",
            `    private get ServerSendItem() {`,
            `       return {`,
            `           path: "10/10/10",`,
            `           request: "item/edit/"`,
            `           token: "0",`,
            `           data: btoa(unescape(encodeURIComponent(JSON.stringify(this.formitem)))),`,
            `       }`,
            `    };`,
            "",
            `    constructor(){`,
            "",
            `    ${this.InitText.join("\n    ")}`,
            "",
            `    ${this.constructorA.join("\n    ")}`,
            `    }`,
            "",
            `    set formitem(passitm:I${this.formname}){  `,
            `    ${this.FillData.join("\n    ")}`,
            `    }`,
            "",
            `             `,
            `    get formitem(): I${this.formname} {`,
            `       let frmdta = {} as I${this.formname};`,
            `       //>> Save Data`,
            `       ${this.SaveData.join("\n    ")}`,
            `       return frmdta;`,
            `   }`,
            "",
            `   checkvalidation() {`,
            `       return true;`,
            `   }`,
            `                `,
            `   async submit() {`,
            "",
            "       if (!this.checkvalidation()) {",
            "           console.error(\"Validation Rule Error\");",
            "           return;",
            "       }",
            "",
            `      let url = this.config.url`,
            "",
            `      const formDataJsonString = JSON.stringify(this.SendData);`,
            "",
            `      const fetchOptions = {`,
            `          method: this.Request.method,`,
            `          headers: {`,
            `              "Content-Type": "application/json",`,
            `              Accept: "application/json",`,
            `          },`,
            `          body: formDataJsonString,`,
            `      };`,
            "",
            `       const response = await fetch(url, fetchOptions);`,
            "",
            `       if (!response.ok) {`,
            `          const errorMessage = await response.text();`,
            `          throw new Error(errorMessage);`,
            `       }`,
            "",
            `       var r = await response.text();`,
            `       console.log(r)`,
            `       return r;`,
            "",
            `    }`,
            "",
            `}`,
        ].join("\n");
    }
}
//# sourceMappingURL=form-handler-base.provider.js.map